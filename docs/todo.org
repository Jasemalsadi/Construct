* Tasks

** ~Math~

The ~Math~ object should be created in much the same way that the
~Date~ object has been.  This will allow us to track ~Math~ object
usage, as well as controlling randomness for improved reproducability.

** ADODB Stream [0%]

*** TODO Methods [0%]
**** TODO Open
**** TODO Close
**** TODO Write
**** TODO WriteText
**** TODO Read
**** TODO ReadText
**** TODO Flush
**** TODO CopyTo
**** TODO SkipLine
**** TODO SetEOS
**** TODO SaveToFile
**** TODO LoadFromFile
**** TODO Cancel


*** Properties [100%]

**** DONE LineSeparator
**** DONE EOS
**** DONE Size
**** DONE Charset
**** DONE Position
**** DONE Type
***** Stream type inference?

Looking through the ADODBStream manual, it says that:

#+BEGIN_QUOTE
Sets or returns a StreamTypeEnum value that specifies the type of data
contained in the Stream object. The default value is
adTypeText. However, if binary data is initially written to a new,
empty Stream, the Type will be changed to adTypeBinary.
#+END_QUOTE

This was tested on a Win7 box with a text stream, loading an EXE and a
JPG file, neither of which got the stream to change its type.  Marking
this as done, but may revisit in the future if I can find a way to
reproduce the behaviour.

**** DONE State
**** DONE Mode


** WshShell
*** TODO Implement LOTS of methods, from Exec onwards, here:
https://msdn.microsoft.com/fr-fr/library/aew9yb99(v=vs.84).aspx

** Short-term goals

*** DONE Implement all XMLHTTP classes

**** TODO Msxml2.XMLHTTP.6.0
**** TODO MsXML2.XMLHTTP.5.0
**** TODO MsXML2.XMLHTTP.4.0
**** TODO Msxml2.XMLHTTP.3.0
**** TODO Msxml2.XMLHTTP
**** TODO Msxml2.ServerXMLHTTP.6.0
**** TODO Msxml2.ServerXMLHTTP.3.0
**** TODO Msxml2.ServerXMLHTTP
**** TODO WinHttpRequest
**** TODO Microsoft.XMLHTTP
**** TODO MSXML.XMLHTTP
****
*** DONE Add a "curl" mode, which will dump curl commands to re-create requests.

*** TODO Add an "eval-rewriter", which captures eval statements and saves them
*** TODO Add an "function in/out" feature which will trap args to and RETs from a fn.
*** TODO The events are nasty; a simpler scheme is needed for properties and methods.

** Commands

*** TODO Add a switch to the 'net' command to show which route handlers were invoked for each domain.

This would be a REALLY useful debugging aid.  It may be worth adding a
separate ~route~ command instead which lets users do things like:

 * add new routes,
 * remove routes,
 * test routes,
 * and test functions in plugins.



** Runtime Environment

*** TODO Update the script timeout handler

After the script times out and aborts, events are still captured.  It
would be nice to interrupt a script (such as a daemon) after N
seconds, and still get to see what was happening.

*** DONE JScript components and methods appear case-insensitive.

Calling something like:

#+BEGIN_SRC js
var foo = new Bar();
foo.test();
foo.Test();
foo.tEst();
foo.teSt();
...
#+END_SRC

Are all equivalent.  I think there's a solution here, where I put a
proxy method in front of all JS_Class instances, lower-case the
incoming property, and redirect it to the method.

** Windows Environment

*** TODO Need to add ability for setting command line arguments.

See the [[file:src/winapi/WshArguments.js][WshArguments.js]] file for more information, but command line
args are grouped in to either:

 * Named parameters -- ~/foo:bar~, and
 * unnamed parameters -- ~/baz /boo~.

Need a way of setting these params that doesn't require writing a
parser.  Far easier to just have options be configured via the
config...some kind of ~/.construct~ or whatever.

*** TODO Need to set a configurable way of changing the CWD of the executing script.

This is currently hard-coded in to the ENVIRONMENT property in ~runtime/hostcontext.js~.

*** TODO Need to take ENV VARS from: https://msdn.microsoft.com/en-gb/library/fd7hxfdd(v=vs.84).aspx





** Code Runner

*** TODO Undefined method/property handling

At present, undefined methods are not handled gracefully.  Need to
find a way to add better debug information to correctly identify the
property or method which is missing which caused the error in the
first place.  A mitigating factor for this is correctly implementing
all methods and properties for all objects, but that's unrealistic.

For an actual example, remove the ~SpecialFolders~ property from
~WScript.Shell~ and run either ~Fax~ example.


** XMLHttpRequestBase
*** TODO ~responseXML~ is not implemented.
*** TODO SETTER: ~timeout~

Timeouts may be a deliberate kill-switch option -- the code may WANT
to timeout.  Tools like construct will need to allow users to mimic
timeout behaviour.

Likely fix: add a "timeout()" function to the nethooks -- a plugin can
call this if it wants to invoke a timeout.  We could also shift along
the sandbox clock by the timeout ms...

** ShellApplication
*** TODO ~ShellExecute~ is important, yet its implementation is sparse.

Currently, ~winapi/ShellApplication.js ShellExecute~ doesn't really do
*anything*.  It's an important method, and likely to be used quite
often and it deserves a better implementation, but at this point in
time, there just isn't enough bandwidth.
