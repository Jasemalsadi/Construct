* Matching Windows Wildcard Behaviour

Matching wildcards in Windows is messy.  This document outlines the
design for how we mimic Windows' wildcarding behaviour.

For sanity, all of the input data used to compile this document is
supported in evidence collected from running ~FindFirstFile~ on a
Windows host.

Finally, ~FindFirstFile~ performs normalisation before wildcard
translation rules are applied, unless the path begins ~\\?\~, which is
Windows' method of saying "do not normalise this path".  See the
[[Wildcard Normalisation Rules]] below for translations.


** Match Symbols

Detailed below are the textual descriptions of how different match
symbols are interpreted by Windows when matching against a filename.

  ~*~ :: Matches any filename character, zero or more times.

  ~?~ :: Matches any filename character exactly once.

  "   :: Matches either a literal period, or zero chars at the end of
  the string.

  ~<~ :: DOS_STAR Matches zero or more characters until encountering
  and matching the final period in the name. (DOS_STAR)

  ~>~ :: DOS_QM

** Lexical Analysis




** Wildcard Normalisation Rules

According to J. Kuhne, almost every path which gets passed to the
Windows API gets normalised.  Normalisation does:

  * Canonicalises component/directory separators.
  * Applies current directories to partially qualified (relative) paths.
  * Evaluates relative directory components (current . and parent ..).
  * Trims certain characters



| RULE                                                                               |
|------------------------------------------------------------------------------------|
| All '?' are changed to '>'.                                                        |
| All '.?' or '.*' are changed to '"'.                                               |
| A path ending in '*' that had a final period before normalising is changed to '<'. |
|                                                                                    |
