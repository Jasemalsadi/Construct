* Matching Windows Wildcard Behaviour

Matching wildcards in Windows is messy.  This document outlines the
design for how we mimic Windows' wildcarding behaviour.

For sanity, all of the input data used to compile this document is
supported in evidence collected from running ~FindFirstFile~ on a
Windows host.

Finally, ~FindFirstFile~ performs normalisation before wildcard
translation rules are applied, unless the path begins ~\\?\~, which is
Windows' method of saying "do not normalise this path".  See the
[[Wildcard Normalisation Rules]] below for translations.

** Lexical Analysis

The lexer accepts a file expression as an input, and converts this
expression in to a series of tokens.  The example below shows the
input and the tokenised output.

Input: ~foo<.<~:

#+BEGIN_SRC c
[
  LITERAL("f"),
  LITERAL("o"),
  LITERAL("o"),
  SYMBOL("DOS_STAR"),
  LITERAL("."),
  LITERAL("DOS_STAR")
]
#+END_SRC




** Wildcard Symbols

| SYMBOL | TAGGED NAME | DESCRIPTION                              |
|--------+-------------+------------------------------------------|
| <c>    | <c>         | <40>                                     |
| *      | ASTERISK    | Matches zero or more characters.         |
| ?      | QMARK       | Matches exactly one character.           |
| <      | DOS_STAR    | Matches zero or more characters until encountering and matching the final period in the name |
| >      | DOS_QM      | Matches any single character, or zero if to the left of a period or the end of the string- or contiguous to other > that are in said position. |
| "      | DOS_DOT     | Matches a period or zero characters at the end of the string. ~ |
| .      | PERIOD      | A literal dot/periot, but with special significance. |


** Wildcard Normalisation Rules

According to J. Kuhne, almost every path which gets passed to the
Windows API gets normalised.  Normalisation does:

  * Canonicalises component/directory separators.
  * Applies current directories to partially qualified (relative) paths.
  * Evaluates relative directory components (current . and parent ..).
  * Trims certain characters



will change your wildcards, The below table tracks the wildcard
translations.

| RULE                                                                             |
|----------------------------------------------------------------------------------|
| <80>                                                                             |
| All '?' are changed to '>'.                                                      |
| All '.?' or '.*' are changed to '"'.                                             |
| A path ending in '*' that had a final period before normalising is changed to '<'. |
