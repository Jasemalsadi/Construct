* Matching Windows Wildcard Behaviour

Matching wildcards in Windows is messy.  This document outlines the
design for how we mimic Windows' wildcarding behaviour.

For sanity, all of the input data used to compile this document is
supported in evidence collected from running ~FindFirstFile~ on a
Windows host.

Finally, ~FindFirstFile~ performs normalisation before wildcard
translation rules are applied, unless the path begins ~\\?\~, which is
Windows' method of saying "do not normalise this path".  See the
[[Wildcard Normalisation Rules]] below for translations.


** Match Symbols

  | Character | Name     |
  |-----------+----------|
  | *         | ASTERISK |
  | ?         | QMARK    |
  | <         | DOS_STAR |
  | >         | DOS_QM   |
  | "         | DOS_DOT  |

Match symbols <, >, and " use "MS DOS semantics", meaning the filename
is treated as if it were in DOS' 8.3 format.  This is explained in
excellent detail in this [[https://blogs.msdn.microsoft.com/oldnewthing/20071217-00/?p=24143/][blog post]].

*** ~DOS_QM(>)~

MS DOS uses 8.3 format, which states that all filenames are 11
characters long with an implicit DOT between characters 8 and 9.
~DOS_QM~ matches using DOS semantics.

#+BEGIN_EXAMPLE
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |     | 9 | 10 | 11 |
|---|---|---|---|---|---|---|---|-----|---|----|----|
| H | e | l | l | o | ^ | ^ | ^ | DOT | t |  x |  t |
#+END_EXAMPLE

It's easier to show DOS_QM matching than to explain it:

  | Index | Pattern         | Match? |
  |-------+-----------------+--------|
  | 1     | ">.txt"         | FALSE  |
  | 2     | ">>.txt"        | FALSE  |
  | 3     | ">>>.txt"       | FALSE  |
  | 4     | ">>>>.txt"      | FALSE  |
  | 5     | ">>>>>.txt"     | TRUE   |
  | 6     | ">>>>>>.txt"    | TRUE   |
  | 7     | ">>>>>>>.txt"   | TRUE   |
  | 8     | ">>>>>>>>.txt"  | TRUE   |
  | 9     | ">>>>>>>>>.txt" | TRUE   |

In its simplest form, ~DOS_QM~ matches exactly one character.  We can
see from the table above that the filename part (~Hello~) starts
matching once we have five ~DOS_QM~ characters, which is to be
expected:

#+BEGIN_EXAMPLE
Filename: | H | e | l | l | o | ^ | ^ | ^ | DOT | t | x | t |
Pattern:  | > | > | > | > | > |   |   |   | DOT | t | x | t |
Match?    | T | T | T | T | T |   |   |   |  T  | T | T | T |
#+END_EXAMPLE




  ~?~ :: Matches any filename character exactly once.

  "   :: Matches either a literal period, or zero chars at the end of
  the string.

  ~<~ :: Matches zero or more characters until encountering and
  matching the last-occurring period in the filename.

  ~>~ :: DOS_QM

I derived these definitions from this [[https://blogs.msdn.microsoft.com/jeremykuhne/2017/06/04/wildcards-in-windows/][Wildcards in Windows]] MSDN blog
post, and my own experiments using ~find_first_file.cc~ in the
~tools/winaup_utils~ folder of this project.



** Lexical Analysis




** Wildcard Normalisation Rules

According to J. Kuhne, almost every path which gets passed to the
Windows API gets normalised.  Normalisation does:

  * Canonicalises component/directory separators.
  * Applies current directories to partially qualified (relative) paths.
  * Evaluates relative directory components (current . and parent ..).
  * Trims certain characters



| RULE                                                                               |
|------------------------------------------------------------------------------------|
| All '?' are changed to '>'.                                                        |
| All '.?' or '.*' are changed to '"'.                                               |
| A path ending in '*' that had a final period before normalising is changed to '<'. |
|                                                                                    |
